#include <stdio.h>
#include <stdlib.h>
#include <limits.h>


int find(int parent[], int i) {
// Write your code here...
	if(parent[i] != i){
		parent[i] = find(parent, parent[i]);
	}
	return parent[i];

}


void union1(int parent[], int rank[], int i, int j) {
	int ri = find(parent, i);
	int rj = find(parent, j);

	if(ri != rj){
		if(rank[ri] < rank[rj])
			parent[ri] = rj;
		else if(rank[ri] > rank[rj])
			parent[rj] = ri;
		else{
			parent[rj] = ri;
			rank[ri]++;
		}
	}
	// Write your code here...
}


void kruskalMST(int **cost, int V) {

	// Write your code here...
	int parent[V], rank[V];
	for(int i=0; i<V; i++){
		parent[i] = i;
		rank[i] = 0;
	}
	int edgeCount = 0, minCost = 0;
	while(edgeCount < V-1){
		int min = INT_MAX, u = -1, v = -1;
	for(int i=0; i<V; i++){
		for(int j=0; j<V; j++){
			if(cost[i][j] < min && i != j){
				min = cost[i][j];
				u = i;
				v = j;
			}
		}
	}
	if(u == -1 || v == -1) break;
	int setU = find(parent, u);
	int setV = find(parent, v);

	if(setU != setV){
		printf("Edge %d:(%d, %d) cost:%d\n", edgeCount, u,v,min);
		minCost += min;

		edgeCount++;
		union1(parent, rank, setU, setV);
	}
	cost[u][v] = cost[v][u] = INT_MAX;
}
	printf("Minimum cost= %d\n", minCost);
}

int main() {
    int V;
    printf("No of vertices: ");
    scanf("%d", &V);

    int **cost = (int **)malloc(V * sizeof(int *));
    for (int i = 0; i < V; i++)
        cost[i] = (int *)malloc(V * sizeof(int));

    printf("Adjacency matrix:\n");
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            scanf("%d", &cost[i][j]);

    kruskalMST(cost, V);

    for (int i = 0; i < V; i++)
        free(cost[i]);
    free(cost);

    return 0;
}
